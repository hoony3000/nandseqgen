version: 0.1

rng:
  seed: 12345

topology:
  dies: 1
  planes_per_die: 2
  blocks_per_plane: 8
  pages_per_block: 64

# 워터마크/큐/루프
policy:
  queue_refill_period_us: 2.0
  lookahead_k: 8
  max_queue_size: 10000
  low_watermark_pgmable: 0.05
  high_watermark_pgmable: 0.12
  aging_weight_alpha: 0.01      # 대기시간 가중

# 트래픽 클래스 혼합 (Host, GC, Reclaim, Diag 등)
mixture:
  classes:
    host:   0.70
    gc:     0.20
    reclaim: 0.10

# 상태-의존 가중치 함수 정의(버킷 기반)
state_buckets:
  pgmable_ratio: [low, mid, high]
  readable_ratio: [low, mid, high]
  plane_busy_frac: [low, mid, high]   # 로컬

weights:
  base:               # 클래스별 기본 분포(연산 종류에 대한 베이스)
    host:
      READ:    0.45
      DOUT:    0.00   # 의무로 유도됨(보통 직접 샘플 X)
      PROGRAM: 0.40
      ERASE:   0.05
      SR:      0.05
      RESET:   0.05
    gc:
      READ:    0.10
      DOUT:    0.00
      PROGRAM: 0.10
      ERASE:   0.70
      SR:      0.05
      RESET:   0.05
    reclaim:
      READ:    0.70
      DOUT:    0.00
      PROGRAM: 0.15
      ERASE:   0.05
      SR:      0.05
      RESET:   0.05

  g_state:            # 전역 상태 가중: pgmable_ratio/ readable_ratio
    pgmable_ratio:
      low:  1.50    # PROGRAM/ERASE 유도
      mid:  1.00
      high: 0.70
    readable_ratio:
      low:  1.50    # READ 유도
      mid:  1.00
      high: 0.80

  g_local:            # 로컬(plane) 바쁨 정도 가중
    plane_busy_frac:
      low:  1.20
      mid:  1.00
      high: 0.80

  g_phase:            # 페이즈(훅 시점) 가중
    READ:
      START_NEAR: 1.20
      MID_NEAR:   0.90
      END_NEAR:   1.20
    PROGRAM:
      START_NEAR: 1.10
      MID_NEAR:   1.10
      END_NEAR:   0.90
    ERASE:
      START_NEAR: 0.90
      MID_NEAR:   1.10
      END_NEAR:   1.10
    SR:
      START_NEAR: 1.30
      MID_NEAR:   1.00
      END_NEAR:   1.00
    RESET:
      START_NEAR: 1.30
      MID_NEAR:   1.00
      END_NEAR:   0.90

# OpKind 별 타임라인(여러 state로 구성)과 Phase 훅 규칙
op_specs:
  READ:
    states:            # state 이름과 분포(상대시간 μs)
      - {name: ISSUE,     dist: {kind: fixed, value: 0.5}}
      - {name: CORE_BUSY, dist: {kind: normal, mean: 30.0, std: 5.0, min: 5.0}}
      - {name: DATA_OUT,  dist: {kind: normal, mean: 8.0,  std: 2.0, min: 1.0}}
    hooks:              # 어떤 포인트에 훅 생성할지
      - {when: STATE_START, states: [ISSUE, CORE_BUSY, DATA_OUT], jitter_us: 0.2}
      - {when: STATE_MID,   states: [CORE_BUSY], jitter_us: 0.5}
      - {when: STATE_END,   states: [CORE_BUSY, DATA_OUT], jitter_us: 0.2}
    phase_offset_us:    # die,plane 위상 오프셋(없으면 0)
      default: 0.0

  DOUT:
    states:
      - {name: ISSUE,     dist: {kind: fixed, value: 0.2}}
      - {name: DATA_OUT,  dist: {kind: normal, mean: 5.0, std: 1.0, min: 0.5}}
    hooks:
      - {when: STATE_START, states: [DATA_OUT], jitter_us: 0.2}
      - {when: STATE_END,   states: [DATA_OUT], jitter_us: 0.2}
    phase_offset_us:
      default: 0.0

  PROGRAM:
    states:
      - {name: ISSUE,     dist: {kind: fixed, value: 0.5}}
      - {name: CORE_BUSY, dist: {kind: normal, mean: 1200.0, std: 100.0, min: 600.0}}
    hooks:
      - {when: STATE_START, states: [ISSUE, CORE_BUSY], jitter_us: 1.0}
      - {when: STATE_END,   states: [CORE_BUSY], jitter_us: 1.0}
    phase_offset_us:
      default: 0.0

  ERASE:
    states:
      - {name: ISSUE,     dist: {kind: fixed, value: 0.5}}
      - {name: CORE_BUSY, dist: {kind: normal, mean: 3000.0, std: 300.0, min: 1500.0}}
    hooks:
      - {when: STATE_START, states: [CORE_BUSY], jitter_us: 2.0}
      - {when: STATE_END,   states: [CORE_BUSY], jitter_us: 2.0}
    phase_offset_us:
      default: 0.0

  SR:
    states:
      - {name: ISSUE,     dist: {kind: fixed, value: 0.1}}
      - {name: STATUS_RD, dist: {kind: fixed, value: 0.2}}
    hooks:
      - {when: STATE_START, states: [STATUS_RD], jitter_us: 0.1}
    phase_offset_us:
      default: 0.0

  RESET:
    states:
      - {name: ISSUE,    dist: {kind: fixed, value: 0.2}}
      - {name: RESET_OP, dist: {kind: fixed, value: 0.5}}
    hooks:
      - {when: STATE_START, states: [RESET_OP], jitter_us: 0.1}
    phase_offset_us:
      default: 0.0

# 의무(쌍) 스펙: 어떤 연산이 끝나면 무엇을 언제까지 내야 하는지
obligations:
  - issuer: READ
    require: DOUT
    window_us: {kind: normal, mean: 12.0, std: 3.0, min: 2.0}   # Δt 분포
    priority_boost:
      start_us_before_deadline: 6.0
      boost_factor: 2.0          # 우선순위 가중 배수
      hard_slot: true            # 마감 임박 시 전용 슬롯 허용

# 의존성 룰 (사전검사용)
dependencies:
  - {before: ERASE,   after: PROGRAM, scope: block}   # ERASE → PROGRAM
  - {before: PROGRAM, after: READ,    scope: page}    # PROGRAM → READ

# 우선순위(스케줄러 최종 결정 시)
priority:
  order: [HOST, READ, DOUT, ERASE, PROGRAM_NEW, PROGRAM_TARGET, SR, RESET]
  starvation_aging_alpha: 0.01

# 주소 선택 정책(사전검사와 함께 사용)
address_policy:
  program_select: {kind: any_pgmable_block}
  read_select:    {kind: any_readable_page}
  erase_select:   {kind: high_invalid_ratio}